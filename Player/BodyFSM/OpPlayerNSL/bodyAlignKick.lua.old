module(..., package.seeall);

require('Body')
require('World')
require('vector')
require('Motion');
require('kick');
require('walk');
require('vcm');
require('Team');

HeadFSM=require(Config.HeadFSM.name)

xTarget=0.13;
yTarget=0.04;
xMax = 0.17;
xKick = 0.025;
yKick = 0.015;
tWaitMin=0.5;
mGyro=2.0;
tLost=1.0;
tFollow= 2.2;
timeout = 5.0;

t0 = 0;
t1=0;
phasecount=0;
kickable=true;

function entry()
  print(_NAME.." entry");
  walk.stopAlign();
  phasecount=0;
  HeadFSM.sm:set_state('headKick');	--Fix camera during approaching
  t00=Body.get_time();
  obstacle=0;

end

count=0;
function update()
  local t = Body.get_time();

  ball=vcm.get_ball();

  if phasecount>2 and not kick.active then
	if obstacle==0 then
   	   return "done";
	else
	   print("KICK_OBSTACLE")
	   return "obstacle";
	end
  end
  if (phasecount==0 and walk.active) then
	  return;
  elseif phasecount==0 then   --Wait for a while
  	phasecount=1;
	t0 = Body.get_time();
  	ball=vcm.get_ball();
	print("Ball pos 0",ball.x,ball.y)
	return;
  end
	
  if phasecount==1 then --Waiting phase 
     count=count+1;
     imuGyr = Body.get_sensor_imuGyr();
     gyro_roll,gyro_pitch=imuGyr[1],imuGyr[2];
     gyromag=math.sqrt(gyro_roll*gyro_roll+gyro_pitch*gyro_pitch);
--   if count%10==0 then  print(gyromag); end
     if t-t0> tWaitMin and gyromag<mGyro then	--Wait till stabilized
	phasecount=2;
     end
  elseif phasecount==2 then
     if (t-ball.t)>tLost then
	print("Ball lost");
        HeadFSM.sm:set_state('headScan');	
	walk.start();
	return "ballLost";
     end

     --Initiate kick
     print("Ball pos",ball.x,ball.y); 
     xDiff=ball.x-xTarget;
     if ball.y>0 then
 	yDiff=ball.y-yTarget;
     else
 	yDiff=ball.y+yTarget;
     end
     print("Error:",xDiff,yDiff);
     if ball.x>xMax then
	walk.start();
	return "ballFar";
     end
     if xDiff > 0.06 or math.abs (yDiff) > 0.06 then
	walk.start();
	return "ballFar";
     end
   
     print("Kickdir:",vcm.kickdir)

     if vcm.kickdir==0 then --straight kick
	     if Config.BodyFSM.level.freespace==1 or
	      Config.BodyFSM.level.freespace==2 then
		occ=check_occupancy();
		if occ~=3 and Config.BodyFSM.level.kick==3 then
	 	   walk.start();
		   return("walkkick"); -- Force walkkick front 
		end
		if occ==0 then --Free to kick
		    tFollow= 2.2;
  	            if (ball.y > 0) then kick.set_kick("kickForwardLeft");
  	            else  kick.set_kick("kickForwardRight");  end            
		elseif occ==1 or occ==2 then --Something nearby
		    tFollow= 2.2;
  	            if (ball.y > 0) then kick.set_kick("kickForwardLeft");
  	            else  kick.set_kick("kickForwardRight");  end            
		elseif occ==3 then --Blocked
		    tFollow= 2.6;
  	            if (ball.y > 0.0) then kick.set_kick("kickSlowSideRight");
  	            elseif ball.y<0.0 then  kick.set_kick("kickSlowSideLeft");  
		    end            
		    obstacle=1;
		    vcm.backpedal=1;
		end
	     else
   	         tFollow= 2.2;
	         if (ball.y > 0) then kick.set_kick("kickForwardLeft");
	         else  kick.set_kick("kickForwardRight");  end            
	     end
     elseif vcm.kickdir==1 then
	tFollow= 2.8;
	kick.set_kick("kickSideLeft");  
     else
	tFollow= 2.8;
	kick.set_kick("kickSideRight");            
     end
     Motion.event("kick");
     t1=t;
     phasecount=3;

  elseif phasecount==3 then --Kicking in progress
     if t1>0 and t>t1+tFollow then
	t1=0;
	print("Head following ball")
        HeadFSM.sm:set_state('headKickFollow');	--Follow ball after kicking
     end
     if (not kick.active) then    
        print("Obstacle:",obstacle)

        vcm.firstkick=0;
	if obstacle==0 then
   	   return "done";
	else
	   print("KICK_OBSTACLE")
	   return "obstacle";
	end
     end
  end
end

function exit()
     local t = Body.get_time();

     print("Obstacle:",obstacle)

     if t1>0 then
	t1=0;
	print("Head following ball")
        HeadFSM.sm:set_state('headKickFollow');	--Follow ball after kicking
        vcm.tHeadGoal = math.max(
 	  t-2.0,vcm.tHeadGoal); 
        --Don't let bodyOrbit look the goal for next 3 seconds
     end
     print("Kick done")
end


function check_occupancy()
  if Team.role==3 then
     return 0; --don't check obstacke for goalie
  end
--[[
  print(vcm.etc.occumap[36],
	vcm.etc.occumap[37],
	vcm.etc.occumap[2],
	vcm.etc.occumap[3]);
--]]

  front_occ=math.min(
	vcm.etc.occumap[37],
	vcm.etc.occumap[2]);


  left_occ=0.5*(vcm.etc.occumap[35]+vcm.etc.occumap[36]);
  right_occ=0.5*(vcm.etc.occumap[3]+vcm.etc.occumap[4]);


  if front_occ<0.5 then
--        Speak2.talk('Blocked')
	return 3;


  elseif left_occ<0.4 then
--        Speak2.talk('Left obstacle')
	return 1;
  elseif right_occ<0.4 then
--        Speak2.talk('Right obstacle')
	return 1;
  else
--      Speak2.talk('Freespace')
	return 0;
  end

end
