module(..., package.seeall);

require('Config');	-- For Ball and Goal Size
require('ImageProc');
require('HeadTransform');	-- For Projection
require('Vision');
require('Body');

-- Define Color
colorOrange = Config.color.orange;
colorYellow = Config.color.yellow;
colorCyan = Config.color.cyan;
colorField = Config.color.field;
colorWhite = Config.color.white;
colorWhite2 = Config.color.white + 8; -- In labelB, white become 24

use_point_goal=Config.vision.use_point_goal;

function detect(color)
  -- Starting Time
  local freespace = {};
  freespace.detect = 1;
  freespace.bound = {}; -- freespace boundary in world
  freespace.boundA = {}; -- freespace boundary in labelA
  freespace.boundB = {}; -- freespace boundary in labelB 

  -- Get label handle
  labelA = Vision.labelA;
  labelB = Vision.labelB;
  -- scale from label A to label B
  scale = 4;

  -- Separate Frame into 8 columns : 80 x 60
  local nCol = 16; -- Search space column
  local nRow = 20; -- Search space row
  local nColB = labelB.m;
  local nRowB = labelB.n; 
  local fillrate = 0.5; -- filling rate 
  local fillrateB = 0.7; -- filling rate for labelB

  -- Search label B column by column for freespace
  for nC = 1 , nColB do
    -- Search box width
    local Xoff = labelB.m/nColB;
    -- Search box height
    local Yoff = labelB.n/nRowB;
    local boundB = {(nC-0.5)*Xoff,1}
-----------------------------------
	local blackbox = {(nC-1)*Xoff+1,nC*Xoff,1,labelB.n};
	local blackB = ImageProc.color_stats(labelB.data,labelB.m,labelB.n,0,blackbox);
	boundB[2] = blackB.area;
	print("black pixels "..blackB.area);
	freespace.boundB[nC],freespace.boundB[nC+nColB]=boundB[1],boundB[2];
--[[
-----------------------------------
	owB,1,-1 do 
        -- search box
	    local bboxB = {(nC-1)*Xoff+1,nC*Xoff,(nR-1)*Yoff+1,nR*Yoff};
	    -- stats Green
     	local fieldB = ImageProc.color_stats(labelB.data,
                               labelB.m, labelB.n, colorField, bboxB);
        -- stats White -- lines are not obstacle
     	local linesB = ImageProc.color_stats(labelB.data,
                               labelB.m, labelB.n, colorWhite, bboxB);
        -- stats White2 -- lines are not obstacle
     	local linesB2 = ImageProc.color_stats(labelB.data,
                               labelB.m, labelB.n, colorWhite2, bboxB);
        -- stats orange -- ball are not obstacle
        local ballB = ImageProc.color_stats(labelB.data,
                               labelB.m, labelB.n, colorOrange, bboxB);
        -- filling percentage  TODO Hard coded percentage computation. need div by 2, but why?
  	    local Per = (fieldB.area + linesB.area + linesB2.area + ballB.area)/(Xoff*Yoff/2);      	    
	    if (Per <= fillrateB) then boundB[2] = (nR+1)*Yoff;
    	 	break; 
	    end -- end if (Per<=thSpace)

	end -- end for nR
    freespace.boundB[nC],freespace.boundB[nC+nColB] = boundB[1],boundB[2];
--]]
  end -- end for search for columns 

  -- Search label A column by column for freespace
  for nC = 1 , nCol do
    -- Search box width
    local Xoff = labelA.m/nCol;
    -- Search box height
    local Yoff = labelA.n/nRow;
    local boundA = {(nC-0.5)*Xoff,1}
	for nR=nRow,1,-1 do 
      -- search box
	  local bbox = {(nC-1)*Xoff+1,nC*Xoff,(nR-1)*Yoff+1,nR*Yoff};   
      -- stats Green
      local field = ImageProc.color_stats(labelA.data,
                             labelA.m, labelA.n, color, bbox);
      -- stats White -- lines are not obstacle
      local lines = ImageProc.color_stats(labelA.data,
                             labelA.m, labelA.n, colorWhite, bbox);
      -- stats orange -- ball are not obstacle
      local ball = ImageProc.color_stats(labelA.data,
                             labelA.m, labelA.n, colorOrange, bbox);
      -- filling percentage
  	  local Per = (field.area + lines.area + ball.area)/(Xoff*Yoff);      	    
	  if (Per <= fillrate) then
--[[aa
	    -- Take reference of labelB search result
	    local refCol = math.ceil(boundA[1]/labelB.m);
		local refbound = scale * freespace.boundB[refCol+nColB];
		-- Take reference only when labelB not 0
		if (refbound < labelB.n) then
		  if (math.abs(nR*Yoff - refbound) < 10) then
	  	    boundA[2] = nR*Yoff;
    	    break;
		  end
	    else 
--]]
			boundA[2] = nR*Yoff;
    	    break;
--		end
	  end -- end if (Per<=thSpace)
	end -- end for nR
    freespace.boundA[nC],freespace.boundA[nC+nCol] = boundA[1],boundA[2];
    --Project to 2D coordinate
    local boundV = HeadTransform.coordinatesA(boundA,scale);
    freespace.bound[nC],freespace.bound[nC+nCol] = boundV[1],boundV[2];
  end -- end for search for columns

  freespace.nCol = nCol;
  freespace.nRow = nRow;
  freespace.nColB = nColB;
  freespace.nRowB = nRowB;
  return freespace;
end
