function ret = lidarbody()
  global HEAD_LIDAR CHEST_LIDAR LIDAR
  LIDAR.meshtype = 2; %Chest lidar default

  LIDAR.init = @init;
  LIDAR.update = @update;
  LIDAR.set_meshtype = @set_meshtype;

  wdim_mesh=361;
  hdim_mesh=60;

  HEAD_LIDAR=[];
  HEAD_LIDAR.type = 0;
  HEAD_LIDAR.ranges=zeros(wdim_mesh,hdim_mesh);
  HEAD_LIDAR.range_actual=ones(wdim_mesh,hdim_mesh);

  HEAD_LIDAR.lidarangles={};
  HEAD_LIDAR.spineangles=[];
  HEAD_LIDAR.verts=[];
  HEAD_LIDAR.faces=[];
  HEAD_LIDAR.cdatas=[];
  HEAD_LIDAR.lidarrange = 1;
  HEAD_LIDAR.selected_points =[];

  CHEST_LIDAR=[];
  CHEST_LIDAR.type = 1;
  CHEST_LIDAR.ranges=zeros(wdim_mesh,hdim_mesh);
  CHEST_LIDAR.lidarangles={};
  CHEST_LIDAR.spineangles=[];
  CHEST_LIDAR.verts=[];
  CHEST_LIDAR.faces=[];
  CHEST_LIDAR.cdatas=[];
  CHEST_LIDAR.lidarrange = 1;
  CHEST_LIDAR.selected_points =[];

  function init(a1,a2,a_mesh)
    %maximum size for 3d mesh

    %% Setup the figure
    HEAD_LIDAR.p1 = a1;
    if a1~=0 
      axes(a1);
      HEAD_LIDAR.h1= imagesc( HEAD_LIDAR.ranges );
      set(HEAD_LIDAR.p1,'xtick',[],'ytick',[])
      colormap('HOT')
      set(HEAD_LIDAR.h1, 'ButtonDownFcn', {@select_3d,1});
    end

    CHEST_LIDAR.p1 = a2;
    if a2~=0 
      axes(a2);
      CHEST_LIDAR.h1= imagesc( CHEST_LIDAR.ranges );
      set(CHEST_LIDAR.p1,'xtick',[],'ytick',[])
      colormap('HOT')
      set(CHEST_LIDAR.h1, 'ButtonDownFcn', {@select_3d,2});
    end

    %Shared mesh display
    LIDAR.p = a_mesh;
    if a_mesh~=0 
      axes(a_mesh);
      LIDAR.h = patch('FaceColor','flat','EdgeColor','none',...
       'AmbientStrength',0.4,'SpecularStrength',0.9 );
      set(a_mesh,'xtick',[],'ytick',[], 'ztick',[])
      light('Position',[-3 1 3]);
      lighting flat
    end
  end

  function set_meshtype(h,~,meshtype)
    LIDAR.meshtype = meshtype;
    if meshtype==1
      set(LIDAR.h,'Faces',HEAD_LIDAR.faces);
      set(LIDAR.h,'Vertices',HEAD_LIDAR.verts);
      set(LIDAR.h,'FaceVertexCData',HEAD_LIDAR.cdatas);
    else
      set(LIDAR.h,'Faces',CHEST_LIDAR.faces);
      set(LIDAR.h,'Vertices',CHEST_LIDAR.verts);
      set(LIDAR.h,'FaceVertexCData',CHEST_LIDAR.cdatas);
    end
  end

  function [nBytes] = update(fd)
    nBytes = 0;
    while udp_recv('getQueueSize',fd) > 0
      udp_data = udp_recv('receive',fd);
      nBytes = nBytes + numel(udp_data);
    end
    data = msgpack('unpack',udp_data);
    metadata = data{1};
    jdepth = data{2};
    if metadata.type==0
      HEAD_LIDAR.ranges = djpeg(jdepth);
      HEAD_LIDAR.lidarangles = metadata.lidarangles;
      HEAD_LIDAR.spineangles = metadata.spineangles;
      HEAD_LIDAR.lidarrange = metadata.lidarrange;
      HEAD_LIDAR.range0 = double(metadata.range0);
      HEAD_LIDAR.range1 = double(metadata.range1);
      HEAD_LIDAR.verts=[];
      HEAD_LIDAR.faces=[];
      HEAD_LIDAR.cdatas=[];
      disp('Head lidar data')
      update_lidar(0);
    else
      CHEST_LIDAR.ranges = djpeg(jdepth);
      CHEST_LIDAR.lidarangles = metadata.lidarangles;
      CHEST_LIDAR.spineangles = metadata.spineangles;
      CHEST_LIDAR.lidarrange = metadata.lidarrange;
      CHEST_LIDAR.range0 = double(metadata.range0);
      CHEST_LIDAR.range1 = double(metadata.range1);
      CHEST_LIDAR.verts=[];
      CHEST_LIDAR.faces=[];
      CHEST_LIDAR.cdatas=[];
      disp('Chest lidar data')
      update_lidar(1);
    end
    set_meshtype(0,0,LIDAR.meshtype); % redraw figure
  end

  function select_3d(h_omap, ~, flags)
    % Add a waypoint
    point = get(gca,'CurrentPoint');
    posxy = [point(1,1) point(1,2)];
    if flags==1 % HEAD LIDAR 
      disp('Point selected')
      HEAD_LIDAR.selected_points =[HEAD_LIDAR.selected_points;posxy];

		  lidarangle_index = floor(posxy(2)-0.5);
		  rayangle_index = size(HEAD_LIDAR.rayangles,1)+1 - floor(posxy(1)-0.5);

	    lidarangle_selected = HEAD_LIDAR.lidarangles_trimmed(lidarangle_index);
		  rayangle_selected = HEAD_LIDAR.rayangles(rayangle_index);
      range = HEAD_LIDAR.range_actual(rayangle_index,lidarangle_index);

		  endpos = lidartrans('headproject',...
				rayangle_selected, lidarangle_selected,range);
		  disp(sprintf('Selected 3D pos: (%.2f %.2f %.2f)',endpos(1),endpos(2),endpos(3) ));

    else
    end

  end



  ret= LIDAR;
end

